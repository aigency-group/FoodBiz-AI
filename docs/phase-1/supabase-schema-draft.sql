-- FoodBiz-AI Core Supabase Schema (no vector/RAG dependencies)

-- Enable required extensions
create extension if not exists "uuid-ossp";

-- 1. Businesses (one per owner)
create table if not exists public.businesses (
  id uuid primary key default uuid_generate_v4(),
  owner_id uuid references auth.users(id) on delete cascade,
  name text not null,
  business_code text unique not null,
  industry text,
  region text,
  created_at timestamptz default now()
);
comment on table public.businesses is '1:1 mapping between auth user and their business profile.';

-- 2. Profiles (extended information for each user)
alter table if exists public.profiles
  add column if not exists business_id uuid references public.businesses(id) on delete cascade,
  add column if not exists owner_name text,
  add column if not exists store_name text,
  add column if not exists business_code text,
  add column if not exists industry text;
create unique index if not exists profiles_business_id_key on public.profiles(business_id);

-- 3. Metrics data (daily aggregates)
create table if not exists public.metrics_daily (
  id bigint generated by default as identity primary key,
  business_id uuid references public.businesses(id) on delete cascade,
  metric_date date not null,
  gross_sales numeric(14,2) default 0,
  net_sales numeric(14,2) default 0,
  cost_of_goods numeric(14,2) default 0,
  tax_amount numeric(14,2) default 0,
  settlement_delay_count integer default 0,
  source text default 'hometax',
  created_at timestamptz default now(),
  unique (business_id, metric_date)
);
create index if not exists metrics_daily_business_date_idx on public.metrics_daily(business_id, metric_date desc);

create table if not exists public.data_jobs (
  id bigint generated by default as identity primary key,
  job_type text not null,
  status text not null,
  message text,
  run_at timestamptz default now(),
  finished_at timestamptz
);

-- Materialized summary for quick dashboard reads
drop materialized view if exists public.metrics_summary;
create materialized view public.metrics_summary as
select
  business_id,
  max(metric_date) as latest_date,
  sum(net_sales) filter (where metric_date >= (current_date - interval '30 days')) as net_sales_30d,
  sum(cost_of_goods) filter (where metric_date >= (current_date - interval '30 days')) as cogs_30d,
  sum(net_sales - cost_of_goods) filter (where metric_date >= (current_date - interval '30 days')) as profit_30d,
  sum(settlement_delay_count) filter (where metric_date >= (current_date - interval '30 days')) as settlement_delay_30d
from public.metrics_daily
where metric_date >= (current_date - interval '90 days')
group by business_id;

create or replace function public.refresh_metrics_summary()
returns trigger as $$
begin
  refresh materialized view public.metrics_summary;
  return null;
end;
$$ language plpgsql;

create trigger metrics_summary_refresh
after insert or update or delete on public.metrics_daily
for each statement execute function public.refresh_metrics_summary();

-- 4. Reviews
create table if not exists public.reviews (
  id bigint generated by default as identity primary key,
  business_id uuid references public.businesses(id) on delete cascade,
  rating numeric(2,1) not null,
  content text not null,
  source text default 'delivery-app',
  reviewed_at timestamptz,
  created_at timestamptz default now()
);
create index if not exists reviews_business_idx on public.reviews(business_id);

drop view if exists public.review_summary;
create view public.review_summary as
select
  business_id,
  count(*) as review_count,
  avg(rating)::numeric(3,2) as average_rating,
  count(*) filter (where rating >= 4) as positive_count,
  count(*) filter (where rating = 3) as neutral_count,
  count(*) filter (where rating <= 2) as negative_count
from public.reviews
group by business_id;

-- 5. Policy data
create table if not exists public.policy_products (
  id uuid primary key default uuid_generate_v4(),
  name text not null,
  group_name text not null,
  limit_amount text,
  interest_rate text,
  term text,
  eligibility text,
  documents text,
  application_method text,
  created_at timestamptz default now()
);

create table if not exists public.policy_applications (
  id uuid primary key default uuid_generate_v4(),
  business_id uuid references public.businesses(id) on delete cascade,
  policy_id uuid references public.policy_products(id) on delete cascade,
  status text not null,
  notes text,
  updated_at timestamptz default now()
);
create index if not exists policy_applications_business_idx on public.policy_applications(business_id);

create table if not exists public.policy_recommendations (
  id uuid primary key default uuid_generate_v4(),
  business_id uuid references public.businesses(id) on delete cascade,
  policy_id uuid references public.policy_products(id) on delete cascade,
  rationale text,
  priority integer default 1,
  created_at timestamptz default now()
);
create index if not exists policy_recommendations_business_idx on public.policy_recommendations(business_id);

-- 6. Helper function for metrics endpoint
create or replace function public.metrics_latest_summary(target_business uuid)
returns table (
  business_id uuid,
  latest_date date,
  gross_sales numeric,
  net_sales numeric,
  cost_of_goods numeric,
  profit numeric,
  settlement_delay integer,
  data_delay_notice text
) as $$
begin
  return query
    select
      m.business_id,
      max(m.metric_date) as latest_date,
      sum(m.gross_sales) filter (where m.metric_date >= (current_date - interval '30 days')),
      sum(m.net_sales) filter (where m.metric_date >= (current_date - interval '30 days')),
      sum(m.cost_of_goods) filter (where m.metric_date >= (current_date - interval '30 days')),
      sum(m.net_sales - m.cost_of_goods) filter (where m.metric_date >= (current_date - interval '30 days')),
      sum(m.settlement_delay_count) filter (where m.metric_date >= (current_date - interval '30 days'))::int,
      '국세청 홈택스 연동으로 1~2일 지연될 수 있어요.'
    from public.metrics_daily m
    where m.business_id = target_business
    group by m.business_id;
end;
$$ language plpgsql security definer;

-- 7. Profiles auto-provisioning on signup (optional example)
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, owner_name, store_name, business_code, industry)
  values (
    new.id,
    coalesce(new.raw_user_meta_data->>'owner_name', '사장님'),
    coalesce(new.raw_user_meta_data->>'store_name', '미등록 상점'),
    coalesce(new.raw_user_meta_data->>'business_code', concat('AUTO-', left(new.id::text, 8))),
    new.raw_user_meta_data->>'industry'
  )
  on conflict (id) do update set
    owner_name = excluded.owner_name,
    store_name = excluded.store_name,
    business_code = excluded.business_code,
    industry = excluded.industry;
  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
